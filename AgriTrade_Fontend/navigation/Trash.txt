




import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  ScrollView,
  Image,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from "react-native";
import { AntDesign } from "@expo/vector-icons";
import axios from "axios";
import { URL } from "./constants";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useFocusEffect } from "@react-navigation/native";

const AddToCart = ({ navigation, route }) => {
  const [cartItems, setCartItems] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // useFocusEffect hook
  useFocusEffect(
    React.useCallback(() => {
      fetchCartDetails();
    }, [])
  );

  const fetchCartDetails = async () => {
    try {
      setIsLoading(true);

      const loginData = await AsyncStorage.getItem("userData");
      const parsedData = JSON.parse(loginData);

      const { id } = parsedData;
      console.log(id);

      const response = await axios.get(`${URL}/getcarts/${id}`, {
        headers: { "Content-Type": "application/json" },
      });

      const reversedCartItems = response.data.cart.reverse();

      setCartItems(reversedCartItems);
    } catch (error) {
      console.log(error.response);
      console.error("Error fetching cart data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCart = (cartId) => {
    axios
      .delete(`${URL}/deletecart/${cartId}`, {
        headers: { "Content-Type": "application/json" },
      })
      .then((response) => {
        console.log("success:", response.data);

        setCartItems((prevCartItems) =>
          prevCartItems.filter((item) => item.id !== cartId)
        );

        Alert.alert("Deleted", "Cart deleted successfully", [{ text: "okay" }]);
      })
      .catch((error) => {
        console.log("Error", error);
      });
  };

  const handleIncreaseQuantity = (cartItemId) => {
    setCartItems((prevCartItems) => {
      return prevCartItems.map((item) => {
        if (item.id === cartItemId) {
          return { ...item, quantity: item.quantity + 1 };
        }
        return item;
      });
    });
  };

  const handleDecreaseQuantity = (cartItemId) => {
    setCartItems((prevCartItems) => {
      return prevCartItems.map((item) => {
        if (item.id === cartItemId && item.quantity > 1) {
          return { ...item, quantity: item.quantity - 1 };
        }
        return item;
      });
    });
  };

  return (
    <ScrollView style={styles.ScrollContainer}>
      {isLoading ? (
        <View
          style={{
            flex: 1,
            justifyContent: "center",
            alignItems: "center",
            marginTop: 300,
          }}
        >
          <ActivityIndicator size="large" color="#00B251" />
        </View>
      ) : (
        <>
          {cartItems.length === 0 ? (
            <View style={styles.NoProductContianer}>
              <Text style={styles.boldText}>Your cart is currently empty.</Text>
              <Text style={styles.subHeaderText}>
                Add products to your cart to proceed
              </Text>
              <TouchableOpacity
                style={styles.goBackButton}
                onPress={() => navigation.goBack("MianTabs")}
              >
                <Text style={styles.BackButtonText}>Return to Home</Text>
              </TouchableOpacity>
            </View>
          ) : (
            cartItems.map((cartItem) => (
              <View style={styles.Cartcontainer} key={cartItem.id}>
                {cartItem.product && (
                  <>
                    <Image
                      source={{ uri: cartItem.product.image || "" }}
                      style={styles.image1}
                    />

                    <View style={styles.textContainer}>
                      <View style={styles.textRow}>
                        <Text style={styles.headingText}>
                          {cartItem.product.productname}
                        </Text>
                        <TouchableOpacity
                          onPress={() => handleDeleteCart(cartItem.id)}
                        >
                          <AntDesign
                            style={styles.deleteIcon}
                            name="delete"
                            size={20}
                            color="black"
                          />
                        </TouchableOpacity>
                      </View>

                      <View style={styles.priceContainer}>
                        <Text style={styles.productText}>
                          {cartItem.productname}
                        </Text>
                        <Text style={styles.amountText}>
                          ${" "}
                          {cartItem.product
                            ? cartItem.product.price.toFixed(2)
                            : 0}
                        </Text>
                      </View>
                      <View style={styles.quantityContainer}>
                        <TouchableOpacity
                          style={styles.quantityButtonminus}
                          onPress={() => handleDecreaseQuantity(cartItem.id)}
                        >
                          <AntDesign
                            style={styles.buttonColor}
                            name="minus"
                            size={20}
                            color="white"
                          />
                        </TouchableOpacity>

                        <Text style={styles.quantityText}>
                          {cartItem.quantity}
                        </Text>

                        <TouchableOpacity
                          style={styles.quantityButtonplus}
                          onPress={() => handleIncreaseQuantity(cartItem.id)}
                        >
                          <AntDesign
                            style={styles.buttonColor}
                            name="plus"
                            size={20}
                            color="white"
                          />
                        </TouchableOpacity>
                      </View>
                    </View>
                  </>
                )}
              </View>
            ))
          )}

          {cartItems.length > 0 && (
            <TouchableOpacity
              style={styles.addButton}
              onPress={() => navigation.navigate("OrderSummary", { cartItems })}
            >
              <Text style={styles.buttonText}>Checkout</Text>
            </TouchableOpacity>
          )}
        </>
      )}
    </ScrollView>
  );
};

export default AddToCart;

const styles = StyleSheet.create({
  Cartcontainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#fffcfc",
    padding: 10,
    marginVertical: 5,
    marginHorizontal: 10,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "lightgrey",
  },

  ScrollContainer: {
    marginTop: 90,
  },

  textContainer: {
    flex: 1,
    marginLeft: 10,
  },

  priceContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 5,
  },

  productText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },

  amountText: {
    fontSize: 14,
    color: "#00B251",
    marginLeft: 6,
    marginTop: -15,
  },

  headingText: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 5,
  },

  deleteIcon: {
    fontSize: 20,
    color: "red",
    marginTop: 15,
  },

  textRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },

  image1: {
    width: 80,
    height: 80,
    borderRadius: 10,
  },

  addButton: {
    backgroundColor: "#00B251",
    padding: 14,
    paddingHorizontal: 20,
    borderRadius: 15,
    marginTop: 30,
    width: "89%",
    alignSelf: "center",
  },

  buttonText: {
    color: "white",
    textAlign: "center",
    fontSize: 20,
    fontWeight: "bold",
  },

  NoProductContianer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 45,
    marginTop: 175,
  },
  boldText: {
    fontSize: 18,
    fontWeight: "bold",
  },
  subHeaderText: {
    fontSize: 16,
    marginTop: 10,
  },

  goBackButton: {
    backgroundColor: "#00B251",
    padding: 12,
    borderRadius: 2,
    marginTop: 10,
  },

  BackButtonText: {
    color: "white",
    fontSize: 15,
  },

  // quantity styles
  quantityContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 5,
  },

  quantityButtonminus: {
    marginRight: 8,
  },

  quantityButtonplus: {
    marginLeft: 8,
  },

  buttonColor: {
    backgroundColor: "#00B251",
    borderRadius: 100,
  },
});




{/* <Text numberOfLines={5} style={styles.paraText}>
          {product.description}
        </Text> */}